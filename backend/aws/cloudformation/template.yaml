AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"
Description: gotron deployment cloudformation script
    
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
      Timeout: 30  # in seconds
Parameters:
  Project:
    Type: String
  TargetEnvr:
    Type: String
Conditions: 
  IsProd: !Equals [ !Ref TargetEnvr, prod ]
Resources:
  ##########################################
  ##### AWS IAM Role to execute lambda #####
  ##########################################
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: !Sub ${Project}-${TargetEnvr}-lambda-execution-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AmazonVPCCrossAccountNetworkInterfaceOperations
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
  ##############################################
  ##### API Gateway and associated Lambdas #####
  ##############################################
  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub ${TargetEnvr}
      EndpointConfiguration: REGIONAL
      DefinitionBody: {
          "openapi": "3.0.1",
          "info": {
            "version": "2020-01-06T07:45:41Z",
            "title": !Sub "${Project}-${TargetEnvr}-api"
          },
          "paths": {
            "/api/me": {
              "get": {
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "security": [{"cognito": []}],
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-me/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              },
              "put": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/putMe"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "security": [{"cognito": []}],
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-me/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/project": {
              "get": {
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "security": [{"cognito": []}],
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-project/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              },
            },
            "/api/project/{id}": {
              "put": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/putProject"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "security": [{"cognito": []}],
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-project/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/project/{id}/approval/{cid}": {
              "put": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "cid",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "security": [{"cognito": []}],
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-project/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/project/{id}/view": {
              "patch": {
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "security": [{"cognito": []}],
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-project/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/sns": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/postSns"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-sns/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/upload": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/postUpload"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "security": [{"cognito": []}],
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-upload/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/user": {
              "patch": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/putUser"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "security": [{"cognito": []}],
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-user/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            }
          },
          "securityDefinitions": {
            "cognito": {
              "type": "apiKey",
              "name": "Authorization",
              "in": "header",
              "x-amazon-apigateway-authtype": "cognito_user_pools",
              "x-amazon-apigateway-authorizer": {
                "providerARNs": [
                  Fn::ImportValue: !Sub '${Project}-${TargetEnvr}-cognito-user-pool-arn'
                ],
                "type": "cognito_user_pools"
              }
            }
          },
          "definitions": {
            "Empty": {
              "type": "object",
              "title": "Empty Schema"
            },
            "postSns": {
              "type": "object",
              "properties": {
                "firstName": {"type": "string"},
                "surname": {"type": "string"},
                "email":{"type": "string"},
                "message":{"type": "string"}
              },
              "required": ["firstName","surname","email","message"]
            },
            "putProject": {
              "type": "object",
              "properties": {
                "name": {"type": "string"},
                "description": {"type": "string"},
                "theme":{"type": "string"},
                "genre":{"type": "string"},
                "language":{"type": "string"},
                "caption":{"type": "string"}
              }
            },
            "postUpload": {
              "type": "object",
              "properties": {
                "type":{"type": "string"},
                "name": {"type": "string"},
                "description": {"type": "string"},
                "theme":{"type": "string"},
                "genre":{"type": "string"},
                "language":{"type": "string"},
                "caption":{"type": "string"},
                "isOriginal":{"type": "boolean"},
              },
              "required": ["type","name","description","theme","genre","language","caption","isOriginal"]
            },
            "putUser": {
              "type": "object",
              "properties": {
                "role": {"type": "string"},
                "language": {"type": "string"},
                "instrument":{"type": "string"},
                "favoriate":{"type": "string"}
              },
              "required": ["role","language","instrument","favoriate"]
            },
            "putMe": {
              "type": "object",
              "properties": {
                "role": {"type": "string"},
                "language": {"type": "string"},
                "bio":{"type": "string"},
                "age":{"type": "string"},
                "tag":{"type": "string"},
                "facebook":{"type": "string"},
                "instagram":{"type": "string"},
                "youtube":{"type": "string"},
                "soundcloud":{"type": "string"}
              }
            }
          },
          "x-amazon-apigateway-request-validators" : {
            "Validate body, query string parameters, and headers" : {
              "validateRequestParameters" : true,
              "validateRequestBody" : true
            },
            "Validate query string parameters and headers" : {
              "validateRequestParameters" : true,
              "validateRequestBody" : false
            }
          }
        }
  LambdaProject:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      Handler: index.project
      Runtime: nodejs18.x
      FunctionName: !Sub ${Project}-${TargetEnvr}-project
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds: [sg-00a1e2a1668125d11]
        SubnetIds: 
        - subnet-0ae38472a33a75137
        - subnet-0dfc7a78154dec1f1
        - subnet-0b77ba257fb40880b
      Environment:
        Variables:
          PROJECT: !Sub ${Project}
          ENVR: !Sub ${TargetEnvr}
          DB_ENDPOINT:
            Fn::ImportValue: !Sub ${Project}-${TargetEnvr}-db-endpoint
          DB_PORT:
            Fn::ImportValue: !Sub ${Project}-${TargetEnvr}-db-port
          DB_USERNAME:
            Fn::ImportValue: !Sub ${Project}-${TargetEnvr}-db-username
          DB_PASSWORD: !Sub '{{resolve:ssm:${Project}-${TargetEnvr}-db-pwd}}'
  InvokePermissionProject:
    Type: AWS::Lambda::Permission
    DependsOn: [ServerlessApi, LambdaProject]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-project
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*
  LambdaSns:
    Type: AWS::Serverless::Function
    DependsOn: [ContactUsSNSTopic]
    Properties:
      Architectures: [arm64]
      Handler: index.sns
      Runtime: nodejs18.x
      FunctionName: !Sub ${Project}-${TargetEnvr}-sns
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      Environment:
        Variables:
          PROJECT: !Sub ${Project}
          SNS_TOPIC_ARN: !Ref ContactUsSNSTopic
  InvokePermissionSns:
    Type: AWS::Lambda::Permission
    DependsOn: [ServerlessApi, LambdaSns]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-sns
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*
  LambdaUpload:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      Handler: index.upload
      Runtime: nodejs18.x
      FunctionName: !Sub ${Project}-${TargetEnvr}-upload
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds: [sg-00a1e2a1668125d11]
        SubnetIds: 
        - subnet-0ae38472a33a75137
        - subnet-0dfc7a78154dec1f1
        - subnet-0b77ba257fb40880b
      Environment:
        Variables:
          PROJECT: !Sub ${Project}
          ENVR: !Sub ${TargetEnvr}
          DB_ENDPOINT:
            Fn::ImportValue: !Sub ${Project}-${TargetEnvr}-db-endpoint
          DB_PORT:
            Fn::ImportValue: !Sub ${Project}-${TargetEnvr}-db-port
          DB_USERNAME:
            Fn::ImportValue: !Sub ${Project}-${TargetEnvr}-db-username
          DB_PASSWORD: !Sub '{{resolve:ssm:${Project}-${TargetEnvr}-db-pwd}}'
  InvokePermissionUpload:
    Type: AWS::Lambda::Permission
    DependsOn: [ServerlessApi, LambdaUpload]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-upload
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*
  LambdaVpc:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      Handler: index.vpc
      Runtime: nodejs18.x
      FunctionName: !Sub ${Project}-${TargetEnvr}-vpc
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds: [sg-00a1e2a1668125d11]
        SubnetIds: 
        - subnet-0ae38472a33a75137
        - subnet-0dfc7a78154dec1f1
        - subnet-0b77ba257fb40880b
      Environment:
        Variables:
          PROJECT: !Sub ${Project}
          ENVR: !Sub ${TargetEnvr}
          DB_ENDPOINT:
            Fn::ImportValue: !Sub ${Project}-${TargetEnvr}-db-endpoint
          DB_PORT:
            Fn::ImportValue: !Sub ${Project}-${TargetEnvr}-db-port
          DB_USERNAME:
            Fn::ImportValue: !Sub ${Project}-${TargetEnvr}-db-username
          DB_PASSWORD: !Sub '{{resolve:ssm:${Project}-${TargetEnvr}-db-pwd}}'
  LambdaUser:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      Handler: index.user
      Runtime: nodejs18.x
      FunctionName: !Sub ${Project}-${TargetEnvr}-user
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      Environment:
        Variables:
          PROJECT: !Sub ${Project}
          ENVR: !Sub ${TargetEnvr}
          USER_POOL_ID:
            Fn::ImportValue: !Sub ${Project}-${TargetEnvr}-cognito-user-pool-id
  InvokePermissionUser:
    Type: AWS::Lambda::Permission
    DependsOn: [ServerlessApi, LambdaUser]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-user
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*
  LambdaMe:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      Handler: index.me
      Runtime: nodejs18.x
      FunctionName: !Sub ${Project}-${TargetEnvr}-me
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds: [sg-00a1e2a1668125d11]
        SubnetIds: 
        - subnet-0ae38472a33a75137
        - subnet-0dfc7a78154dec1f1
        - subnet-0b77ba257fb40880b
      Environment:
        Variables:
          PROJECT: !Sub ${Project}
          ENVR: !Sub ${TargetEnvr}
          DB_ENDPOINT:
            Fn::ImportValue: !Sub ${Project}-${TargetEnvr}-db-endpoint
          DB_PORT:
            Fn::ImportValue: !Sub ${Project}-${TargetEnvr}-db-port
          DB_USERNAME:
            Fn::ImportValue: !Sub ${Project}-${TargetEnvr}-db-username
          DB_PASSWORD: !Sub '{{resolve:ssm:${Project}-${TargetEnvr}-db-pwd}}'
  InvokePermissionMe:
    Type: AWS::Lambda::Permission
    DependsOn: [ServerlessApi, LambdaMe]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-me
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*
  #########################################
  ##### Cloudfront and Route53 config #####
  #########################################
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: [ServerlessApi, S3Bucket]
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Select [1, !Split ["//", !GetAtt S3Bucket.WebsiteURL]]
          Id: S3-hosted-website-ID
          CustomOriginConfig:
            OriginProtocolPolicy: http-only
        - DomainName: !Sub '${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com'
          Id: !Sub ${Project}-${TargetEnvr}-ApiEndpoint-ID
          OriginPath: !Sub /${TargetEnvr}
          CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginKeepaliveTimeout: 5
            OriginProtocolPolicy: https-only
        Enabled: 'true'
        HttpVersion: http2
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods: [ "GET", "HEAD", "OPTIONS", "PUT", "PATCH", "POST", "DELETE"]
          TargetOriginId: S3-hosted-website-ID
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
        CacheBehaviors:
        - PathPattern: /api/*
          AllowedMethods: [ "GET", "HEAD", "OPTIONS", "PUT", "PATCH", "POST", "DELETE"]
          ForwardedValues:
            Headers: [ "Authorization", "Accept" ]
            QueryString: true
          TargetOriginId: !Sub ${Project}-${TargetEnvr}-ApiEndpoint-ID
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
        PriceClass: PriceClass_200
  ####################################
  ##### S3 Bucket and its policy #####
  ####################################
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Project}-${TargetEnvr}
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: [S3Bucket]
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument: !Join
      - ''
      - - '{
            "Version": "2012-10-17",
            "Id": "PolicyForCloudFrontPrivateContent",
            "Statement": [
                {
                    "Sid": "Allow-OAI-Access-To-Bucket",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": "'
        - !GetAtt S3Bucket.Arn
        - '/*"
                }
            ]
          }'
  S3BucketStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Project}-${TargetEnvr}-storage
  #######################################
  ##### SNS Topic and Subscriptions #####
  #######################################
  ContactUsSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${Project}-${TargetEnvr}-contact-us-topic
      Subscription:
        - Endpoint: lamplighter.planet@gmail.com
          Protocol: email
        - Endpoint: gotronmusic@gmail.com
          Protocol: email
      TopicName: !Sub ${Project}-${TargetEnvr}-contact-us-topic