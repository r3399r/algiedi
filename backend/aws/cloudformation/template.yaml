AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"
Description: gotron deployment cloudformation script
    
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
      Timeout: 30  # in seconds
Parameters:
  LambdaExecutionRole:
    Type: String
    Default: BackendProcess
  NodeJsVer:
    Type: String
    Default: nodejs14.x
  Project:
    Type: String
  TargetEnvr:
    Type: String
  SubDomain:
    Type: String
  Domain:
    Type: String
Conditions: 
  IsProd: !Equals [ !Ref TargetEnvr, prod ]
Resources:
  ##############################################
  ##### API Gateway and associated Lambdas #####
  ##############################################
  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub ${TargetEnvr}
      EndpointConfiguration: REGIONAL
      DefinitionBody: {
          "openapi": "3.0.1",
          "info": {
            "version": "2020-01-06T07:45:41Z",
            "title": !Sub "${Project}-${TargetEnvr}-api"
          },
          "paths": {
            "/api/sns": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/postSns"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-sns/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/variable": {
              "get": {
                "parameters" : [ {
                  "name" : "name",
                  "in" : "query",
                  "required" : true,
                  "schema" : {
                    "type" : "string"
                  }
                }],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-variable/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            }
          },
          "definitions": {
            "Empty": {
              "type": "object",
              "title": "Empty Schema"
            },
            "postSns": {
              "type": "object",
              "properties": {
                "firstName": {"type": "string"},
                "surname": {"type": "string"},
                "email":{"type": "string"},
                "message":{"type": "string"}
              },
              "required": ["firstName","surname","email","message"]
            }
          },
          "x-amazon-apigateway-request-validators" : {
            "Validate body, query string parameters, and headers" : {
              "validateRequestParameters" : true,
              "validateRequestBody" : true
            },
            "Validate query string parameters and headers" : {
              "validateRequestParameters" : true,
              "validateRequestBody" : false
            }
          }
        }
  LambdaCognitoMessage:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      Handler: index.cognitoMessage
      Runtime: !Sub ${NodeJsVer}
      FunctionName: !Sub ${Project}-${TargetEnvr}-cognitoMessage
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}"
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
  InvokePermissionCognitoMessage:
    Type: AWS::Lambda::Permission
    DependsOn: [CognitoUserPool, LambdaCognitoMessage]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-cognitoMessage
      Action: 'lambda:InvokeFunction'
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn
  LambdaSns:
    Type: AWS::Serverless::Function
    DependsOn: [ContactUsSNSTopic]
    Properties:
      Architectures: [arm64]
      Handler: index.sns
      Runtime: !Sub ${NodeJsVer}
      FunctionName: !Sub ${Project}-${TargetEnvr}-sns
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}"
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      Environment:
        Variables:
          PROJECT: !Sub ${Project}
          SNS_TOPIC_ARN: !Ref ContactUsSNSTopic
  InvokePermissionSns:
    Type: AWS::Lambda::Permission
    DependsOn: [ServerlessApi, LambdaSns]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-sns
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*
  LambdaVariable:
    Type: AWS::Serverless::Function
    DependsOn: [CognitoUserPool, CognitoUserPoolClient]
    Properties:
      Architectures: [arm64]
      Handler: index.variable
      Runtime: !Sub ${NodeJsVer}
      FunctionName: !Sub ${Project}-${TargetEnvr}-variable
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}"
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      Environment:
        Variables:
          USER_POOL_ID: !Sub ${CognitoUserPool}
          USER_POOL_CLIENT_ID: !Sub ${CognitoUserPoolClient}
  InvokePermissionVariable:
    Type: AWS::Lambda::Permission
    DependsOn: [ServerlessApi, LambdaVariable]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-variable
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*
  #########################################
  ##### Cloudfront and Route53 config #####
  #########################################
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: [ServerlessApi, S3Bucket]
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Select [1, !Split ["//", !GetAtt S3Bucket.WebsiteURL]]
          Id: S3-hosted-website-ID
          CustomOriginConfig:
            OriginProtocolPolicy: http-only
        - DomainName: !Sub '${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com'
          Id: !Sub ${Project}-${TargetEnvr}-ApiEndpoint-ID
          OriginPath: !Sub /${TargetEnvr}
          CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginKeepaliveTimeout: 5
            OriginProtocolPolicy: https-only
        Enabled: 'true'
        HttpVersion: http2
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods: [ "GET", "HEAD", "OPTIONS", "PUT", "PATCH", "POST", "DELETE"]
          TargetOriginId: S3-hosted-website-ID
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
        CacheBehaviors:
        - PathPattern: /api/*
          AllowedMethods: [ "GET", "HEAD", "OPTIONS", "PUT", "PATCH", "POST", "DELETE"]
          ForwardedValues:
            Headers: [ "Authorization", "Accept" ]
            QueryString: true
          TargetOriginId: !Sub ${Project}-${TargetEnvr}-ApiEndpoint-ID
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
        PriceClass: PriceClass_200
  ####################################
  ##### S3 Bucket and its policy #####
  ####################################
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Project}-${TargetEnvr}
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: [S3Bucket]
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument: !Join
      - ''
      - - '{
            "Version": "2012-10-17",
            "Id": "PolicyForCloudFrontPrivateContent",
            "Statement": [
                {
                    "Sid": "Allow-OAI-Access-To-Bucket",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": "'
        - !GetAtt S3Bucket.Arn
        - '/*"
                }
            ]
          }'
  #######################################
  ##### SNS Topic and Subscriptions #####
  #######################################
  ContactUsSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${Project}-${TargetEnvr}-contact-us-topic
      Subscription:
        - Endpoint: lamplighter.planet@gmail.com
          Protocol: email
      TopicName: !Sub ${Project}-${TargetEnvr}-contact-us-topic
  #############################
  ##### Cognito User Pool #####
  #############################
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
        - Name: verified_email
          Priority: 1
      AutoVerifiedAttributes: [email]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      Schema:
        - Name: user_name
          AttributeDataType: String
          Mutable: true
        - Name: role
          AttributeDataType: String
          Mutable: true
        - Name: age
          AttributeDataType: Number
          Mutable: true
        - Name: questionnaire_filled
          AttributeDataType: Boolean
          Mutable: true
        - Name: language
          AttributeDataType: String
          Mutable: true
        - Name: bio
          AttributeDataType: String
          Mutable: true
        - Name: tag
          AttributeDataType: String
          Mutable: true
        - Name: facebook
          AttributeDataType: String
          Mutable: true
        - Name: instagram
          AttributeDataType: String
          Mutable: true
        - Name: youtube
          AttributeDataType: String
          Mutable: true
        - Name: soundcloud
          AttributeDataType: String
          Mutable: true
      UsernameAttributes: [email]
      UserPoolName: !Sub ${Project}-${TargetEnvr}
      LambdaConfig:
        CustomMessage: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-cognitoMessage
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: [CognitoUserPool]
    Properties:
      UserPoolId: !Sub ${CognitoUserPool}