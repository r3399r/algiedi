AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"
Description: gotron infrastructure cloudformation script
    
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
      Timeout: 30  # in seconds
Parameters:
  Project:
    Type: String
  TargetEnvr:
    Type: String
  Domain:
    Type: String
Resources:
  ##########################################
  ##### AWS IAM Role to execute lambda #####
  ##########################################
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: !Sub ${Project}-${TargetEnvr}-infra-lambda-execution-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonVPCCrossAccountNetworkInterfaceOperations
  ########################################
  ##### AWS RDS and related services #####
  ########################################
  RdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub ${Project}-${TargetEnvr}-subnet-group
      DBSubnetGroupDescription: Subnet Group
      SubnetIds:
      - subnet-0ae38472a33a75137
      - subnet-0dfc7a78154dec1f1
      - subnet-0b77ba257fb40880b
  RdsDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: mysql
      EngineVersion: 8.0.32
      MultiAZ: false
      DBInstanceIdentifier: !Sub ${Project}-${TargetEnvr}
      MasterUsername: admin
      MasterUserPassword: temp12345678
      DBInstanceClass: db.t3.micro
      StorageType: gp2
      AllocatedStorage: 20
      PubliclyAccessible: true
      VPCSecurityGroups: [sg-00a1e2a1668125d11]
      DBSubnetGroupName: !Ref RdsSubnetGroup
  #####################################
  ##### Required Lambda functions #####
  #####################################
  LambdaCognitoMessage:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      Handler: index.message
      Runtime: nodejs18.x
      FunctionName: !Sub ${Project}-${TargetEnvr}-message
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      Environment:
        Variables:
          ENVR: !Sub ${TargetEnvr}
          DOMAIN: !Sub ${Domain}
  InvokePermissionCognitoMessage:
    Type: AWS::Lambda::Permission
    DependsOn: [LambdaCognitoMessage]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-message
      Action: 'lambda:InvokeFunction'
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn
  LambdaCognitoSignup:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      Handler: index.signup
      Runtime: nodejs18.x
      FunctionName: !Sub ${Project}-${TargetEnvr}-signup
      Role: !GetAtt ExecutionRole.Arn
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds: [sg-00a1e2a1668125d11]
        SubnetIds: 
        - subnet-0ae38472a33a75137
        - subnet-0dfc7a78154dec1f1
        - subnet-0b77ba257fb40880b
      Environment:
        Variables:
          PROJECT: !Sub ${Project}
          ENVR: !Sub ${TargetEnvr}
          DB_ENDPOINT: !GetAtt RdsDatabase.Endpoint.Address
          DB_PORT: !GetAtt RdsDatabase.Endpoint.Port
          DB_USERNAME: admin
          DB_PASSWORD: !Sub '{{resolve:ssm:${Project}-${TargetEnvr}-db-pwd}}'
  InvokePermissionCognitoSignup:
    Type: AWS::Lambda::Permission
    DependsOn: [LambdaCognitoSignup]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-signup
      Action: 'lambda:InvokeFunction'
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn
  #############################
  ##### Cognito User Pool #####
  #############################
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
        - Name: verified_email
          Priority: 1
      AutoVerifiedAttributes: [email]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      Schema:
        - Name: user_name
          AttributeDataType: String
          Mutable: true
        - Name: status
          AttributeDataType: String
          Mutable: true
        - Name: role
          AttributeDataType: String
          Mutable: true
        - Name: age
          AttributeDataType: Number
          Mutable: true
        - Name: questionnaire_filled
          AttributeDataType: Boolean
          Mutable: true
        - Name: language
          AttributeDataType: String
          Mutable: true
        - Name: bio
          AttributeDataType: String
          Mutable: true
        - Name: tag
          AttributeDataType: String
          Mutable: true
        - Name: facebook
          AttributeDataType: String
          Mutable: true
        - Name: instagram
          AttributeDataType: String
          Mutable: true
        - Name: youtube
          AttributeDataType: String
          Mutable: true
        - Name: soundcloud
          AttributeDataType: String
          Mutable: true
        - Name: last_project_id
          AttributeDataType: String
          Mutable: true
      UsernameAttributes: [email]
      UserPoolName: !Sub ${Project}-${TargetEnvr}
      LambdaConfig:
        CustomMessage: !GetAtt LambdaCognitoMessage.Arn
        PreSignUp: !GetAtt LambdaCognitoSignup.Arn
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: [CognitoUserPool]
    Properties:
      UserPoolId: !Sub ${CognitoUserPool}
Outputs:
  UserPool:
    Value: !Sub ${CognitoUserPool}
    Export:
      Name: !Sub ${Project}-${TargetEnvr}-cognito-user-pool-id
  UserPoolArn:
    Value: !GetAtt CognitoUserPool.Arn
    Export:
      Name: !Sub ${Project}-${TargetEnvr}-cognito-user-pool-arn
  UserPoolClient:
    Value: !Sub ${CognitoUserPoolClient}
    Export:
      Name: !Sub ${Project}-${TargetEnvr}-cognito-user-pool-client-id
  DbEndpoint:
    Value: !GetAtt RdsDatabase.Endpoint.Address
    Export:
      Name: !Sub ${Project}-${TargetEnvr}-db-endpoint
  DbPort:
    Value: !GetAtt RdsDatabase.Endpoint.Port
    Export:
      Name: !Sub ${Project}-${TargetEnvr}-db-port
  DbUsername:
    Value: admin
    Export:
      Name: !Sub ${Project}-${TargetEnvr}-db-username