AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"
Description: gotron infrastructure cloudformation script
    
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
      Timeout: 30  # in seconds
Parameters:
  Project:
    Type: String
  TargetEnvr:
    Type: String
  Domain:
    Type: String
Resources:
  ##########################################
  ##### AWS IAM Role to execute lambda #####
  ##########################################
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: !Sub ${Project}-${TargetEnvr}-infra-lambda-execution-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  ########################################
  ##### AWS RDS and related services #####
  ########################################
  RdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub ${Project}-${TargetEnvr}-subnet-group
      DBSubnetGroupDescription: Subnet Group
      SubnetIds:
      - subnet-0ae38472a33a75137
      - subnet-0dfc7a78154dec1f1
      - subnet-0b77ba257fb40880b
  RdsDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: mysql
      EngineVersion: 8.0.32
      MultiAZ: false
      DBInstanceIdentifier: !Sub ${Project}-${TargetEnvr}
      MasterUsername: admin
      MasterUserPassword: temp12345678
      DBInstanceClass: db.t3.micro
      StorageType: gp2
      AllocatedStorage: 20
      PubliclyAccessible: true
      DBSubnetGroupName: !Ref RdsSubnetGroup
  #############################
  ##### Cognito User Pool #####
  #############################
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
        - Name: verified_email
          Priority: 1
      AutoVerifiedAttributes: [email]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      Schema:
        - Name: user_name
          AttributeDataType: String
          Mutable: true
        - Name: status
          AttributeDataType: String
          Mutable: true
      UsernameAttributes: [email]
      UserPoolName: !Sub ${Project}-${TargetEnvr}
      LambdaConfig:
        CustomMessage: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-message
        PreSignUp: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-signup
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: [CognitoUserPool]
    Properties:
      UserPoolId: !Sub ${CognitoUserPool}
Outputs:
  UserPool:
    Value: !Sub ${CognitoUserPool}
    Export:
      Name: !Sub ${Project}-${TargetEnvr}-cognito-user-pool-id
  UserPoolArn:
    Value: !GetAtt CognitoUserPool.Arn
    Export:
      Name: !Sub ${Project}-${TargetEnvr}-cognito-user-pool-arn
  DbEndpoint:
    Value: !GetAtt RdsDatabase.Endpoint.Address
    Export:
      Name: !Sub ${Project}-${TargetEnvr}-db-endpoint
  DbPort:
    Value: !GetAtt RdsDatabase.Endpoint.Port
    Export:
      Name: !Sub ${Project}-${TargetEnvr}-db-port
  DbUsername:
    Value: admin
    Export:
      Name: !Sub ${Project}-${TargetEnvr}-db-username